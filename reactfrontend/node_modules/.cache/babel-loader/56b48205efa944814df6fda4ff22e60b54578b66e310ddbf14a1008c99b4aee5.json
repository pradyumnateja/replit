{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/employees';\nconst handleError = (error, message) => {\n  var _error$response, _error$response$data;\n  console.error(message, error);\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n};\nconst EmployeeService = {\n  getAllEmployees: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/all`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all employees:', error);\n      throw error;\n    }\n  },\n  getActiveEmployees: async () => {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching active employees:', error);\n      throw error;\n    }\n  },\n  getEmployeeDetails: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching employee details for ID ${id}:`, error);\n      throw error;\n    }\n  },\n  createEmployee: async (employee, managerId) => {\n    try {\n      const url = managerId ? `${API_URL}?managerId=${managerId}` : API_URL;\n      // Backend expects dates in MM/dd/yyyy format\n      const employeeData = {\n        ...employee,\n        hireDate: employee.hireDate // hireDate should already be in MM/dd/yyyy format from the form\n      };\n      const response = await axios.post(url, employeeData);\n      return response.data;\n    } catch (error) {\n      return handleError(error, 'Error creating employee');\n    }\n  },\n  deactivateEmployee: async id => {\n    try {\n      const response = await axios.put(`${API_URL}/${id}/deactivate`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, `Error deactivating employee with ID ${id}`);\n    }\n  },\n  activateEmployee: async id => {\n    try {\n      const response = await axios.put(`${API_URL}/${id}/reactivate`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, `Error activating employee with ID ${id}`);\n    }\n  },\n  getEmployeesByHireDate: async (startDate, endDate) => {\n    try {\n      // Validate dates\n      const today = '2025-04-13';\n      const minDate = '1925-04-13';\n      if (startDate > today || endDate > today) {\n        throw new Error('Cannot search with future dates');\n      }\n      if (startDate < minDate || endDate < minDate) {\n        throw new Error('Dates cannot be more than 100 years in the past');\n      }\n      if (startDate > endDate) {\n        throw new Error('Start date must be before or equal to end date');\n      }\n      console.log('Sending date range request:', {\n        startDate,\n        endDate\n      });\n      const response = await axios.get(`${API_URL}/hired`, {\n        params: {\n          startDate: startDate,\n          endDate: endDate\n        }\n      });\n      console.log('Got response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees by hire date:', error);\n      throw error;\n    }\n  },\n  deleteEmployee: async id => {\n    console.log(`Attempting to delete employee with ID: ${id}`);\n    try {\n      const response = await axios.delete(`${API_URL}/${id}`);\n      console.log(`Successfully deleted employee with ID: ${id}`, response);\n    } catch (error) {\n      console.error(`Failed to delete employee with ID: ${id}`, error.response || error);\n      return handleError(error, `Error deleting employee with ID ${id}`);\n    }\n  }\n};\nexport default EmployeeService;","map":{"version":3,"names":["axios","API_URL","handleError","error","message","_error$response","_error$response$data","console","response","data","Error","EmployeeService","getAllEmployees","get","getActiveEmployees","getEmployeeDetails","id","createEmployee","employee","managerId","url","employeeData","hireDate","post","deactivateEmployee","put","activateEmployee","getEmployeesByHireDate","startDate","endDate","today","minDate","log","params","deleteEmployee","delete"],"sources":["/Users/pradyumnateja/Desktop/flywireassessment/PradyumanaTejaNS-flywire-exercise/reactfrontend/src/services/EmployeeService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/employees';\n\nconst handleError = (error, message) => {\n  console.error(message, error);\n  if (error.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n};\n\nconst EmployeeService = {\n  getAllEmployees: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/all`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all employees:', error);\n      throw error;\n    }\n  },\n  \n  getActiveEmployees: async () => {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching active employees:', error);\n      throw error;\n    }\n  },\n  \n  getEmployeeDetails: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching employee details for ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  createEmployee: async (employee, managerId) => {\n    try {\n      const url = managerId ? `${API_URL}?managerId=${managerId}` : API_URL;\n      // Backend expects dates in MM/dd/yyyy format\n      const employeeData = {\n        ...employee,\n        hireDate: employee.hireDate // hireDate should already be in MM/dd/yyyy format from the form\n      };\n      const response = await axios.post(url, employeeData);\n      return response.data;\n    } catch (error) {\n      return handleError(error, 'Error creating employee');\n    }\n  },\n  \n  deactivateEmployee: async (id) => {\n    try {\n      const response = await axios.put(`${API_URL}/${id}/deactivate`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, `Error deactivating employee with ID ${id}`);\n    }\n  },\n  \n  activateEmployee: async (id) => {\n    try {\n      const response = await axios.put(`${API_URL}/${id}/reactivate`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, `Error activating employee with ID ${id}`);\n    }\n  },\n  \n  getEmployeesByHireDate: async (startDate, endDate) => {\n    try {\n      // Validate dates\n      const today = '2025-04-13';\n      const minDate = '1925-04-13';\n\n      if (startDate > today || endDate > today) {\n        throw new Error('Cannot search with future dates');\n      }\n\n      if (startDate < minDate || endDate < minDate) {\n        throw new Error('Dates cannot be more than 100 years in the past');\n      }\n\n      if (startDate > endDate) {\n        throw new Error('Start date must be before or equal to end date');\n      }\n\n      console.log('Sending date range request:', { startDate, endDate });\n      const response = await axios.get(`${API_URL}/hired`, {\n        params: {\n          startDate: startDate,\n          endDate: endDate\n        }\n      });\n      console.log('Got response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees by hire date:', error);\n      throw error;\n    }\n  },\n\n\n\n  deleteEmployee: async (id) => {\n    console.log(`Attempting to delete employee with ID: ${id}`);\n    try {\n      const response = await axios.delete(`${API_URL}/${id}`);\n      console.log(`Successfully deleted employee with ID: ${id}`, response);\n    } catch (error) {\n      console.error(`Failed to delete employee with ID: ${id}`, error.response || error);\n      return handleError(error, `Error deleting employee with ID ${id}`);\n    }\n  }\n};\n\nexport default EmployeeService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gBAAgB;AAEhC,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAAA,IAAAC,eAAA,EAAAC,oBAAA;EACtCC,OAAO,CAACJ,KAAK,CAACC,OAAO,EAAED,KAAK,CAAC;EAC7B,KAAAE,eAAA,GAAIF,KAAK,CAACK,QAAQ,cAAAH,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,eAApBA,oBAAA,CAAsBF,OAAO,EAAE;IACjC,MAAM,IAAIM,KAAK,CAACP,KAAK,CAACK,QAAQ,CAACC,IAAI,CAACL,OAAO,CAAC;EAC9C;EACA,MAAMD,KAAK;AACb,CAAC;AAED,MAAMQ,eAAe,GAAG;EACtBC,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMR,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,MAAM,CAAC;MAClD,OAAOO,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDW,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMR,KAAK,CAACa,GAAG,CAACZ,OAAO,CAAC;MACzC,OAAOO,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDY,kBAAkB,EAAE,MAAOC,EAAE,IAAK;IAChC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,IAAIe,EAAE,EAAE,CAAC;MACpD,OAAOR,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0CAA0Ca,EAAE,GAAG,EAAEb,KAAK,CAAC;MACrE,MAAMA,KAAK;IACb;EACF,CAAC;EAEDc,cAAc,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;IAC7C,IAAI;MACF,MAAMC,GAAG,GAAGD,SAAS,GAAG,GAAGlB,OAAO,cAAckB,SAAS,EAAE,GAAGlB,OAAO;MACrE;MACA,MAAMoB,YAAY,GAAG;QACnB,GAAGH,QAAQ;QACXI,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ,CAAC;MAC9B,CAAC;MACD,MAAMd,QAAQ,GAAG,MAAMR,KAAK,CAACuB,IAAI,CAACH,GAAG,EAAEC,YAAY,CAAC;MACpD,OAAOb,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,yBAAyB,CAAC;IACtD;EACF,CAAC;EAEDqB,kBAAkB,EAAE,MAAOR,EAAE,IAAK;IAChC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CAACyB,GAAG,CAAC,GAAGxB,OAAO,IAAIe,EAAE,aAAa,CAAC;MAC/D,OAAOR,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,uCAAuCa,EAAE,EAAE,CAAC;IACxE;EACF,CAAC;EAEDU,gBAAgB,EAAE,MAAOV,EAAE,IAAK;IAC9B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CAACyB,GAAG,CAAC,GAAGxB,OAAO,IAAIe,EAAE,aAAa,CAAC;MAC/D,OAAOR,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,qCAAqCa,EAAE,EAAE,CAAC;IACtE;EACF,CAAC;EAEDW,sBAAsB,EAAE,MAAAA,CAAOC,SAAS,EAAEC,OAAO,KAAK;IACpD,IAAI;MACF;MACA,MAAMC,KAAK,GAAG,YAAY;MAC1B,MAAMC,OAAO,GAAG,YAAY;MAE5B,IAAIH,SAAS,GAAGE,KAAK,IAAID,OAAO,GAAGC,KAAK,EAAE;QACxC,MAAM,IAAIpB,KAAK,CAAC,iCAAiC,CAAC;MACpD;MAEA,IAAIkB,SAAS,GAAGG,OAAO,IAAIF,OAAO,GAAGE,OAAO,EAAE;QAC5C,MAAM,IAAIrB,KAAK,CAAC,iDAAiD,CAAC;MACpE;MAEA,IAAIkB,SAAS,GAAGC,OAAO,EAAE;QACvB,MAAM,IAAInB,KAAK,CAAC,gDAAgD,CAAC;MACnE;MAEAH,OAAO,CAACyB,GAAG,CAAC,6BAA6B,EAAE;QAAEJ,SAAS;QAAEC;MAAQ,CAAC,CAAC;MAClE,MAAMrB,QAAQ,GAAG,MAAMR,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,QAAQ,EAAE;QACnDgC,MAAM,EAAE;UACNL,SAAS,EAAEA,SAAS;UACpBC,OAAO,EAAEA;QACX;MACF,CAAC,CAAC;MACFtB,OAAO,CAACyB,GAAG,CAAC,eAAe,EAAExB,QAAQ,CAACC,IAAI,CAAC;MAC3C,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF,CAAC;EAID+B,cAAc,EAAE,MAAOlB,EAAE,IAAK;IAC5BT,OAAO,CAACyB,GAAG,CAAC,0CAA0ChB,EAAE,EAAE,CAAC;IAC3D,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CAACmC,MAAM,CAAC,GAAGlC,OAAO,IAAIe,EAAE,EAAE,CAAC;MACvDT,OAAO,CAACyB,GAAG,CAAC,0CAA0ChB,EAAE,EAAE,EAAER,QAAQ,CAAC;IACvE,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,sCAAsCa,EAAE,EAAE,EAAEb,KAAK,CAACK,QAAQ,IAAIL,KAAK,CAAC;MAClF,OAAOD,WAAW,CAACC,KAAK,EAAE,mCAAmCa,EAAE,EAAE,CAAC;IACpE;EACF;AACF,CAAC;AAED,eAAeL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}